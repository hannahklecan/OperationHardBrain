//Java
class Solution {
    public boolean isAnagram(String s, String t) {
        int[] count = new int[26];
        
        // Count the frequency of characters in string s
        for (char x : s.toCharArray()) {
            count[x - 'a']++;
        }
        
        // Decrement the frequency of characters in string t
        for (char x : t.toCharArray()) {
            count[x - 'a']--;
        }
        
        // Check if any character has non-zero frequency
        for (int val : count) {
            if (val != 0) {
                return false;
            }
        }
        
        return true;
    }
}


//C
// 0 ms!
//ASCII Only
/**
 * Function: isAnagram
 * -------------------
 * This function checks whether two given strings are anagrams of each other.
 * Two strings are anagrams if they contain the same characters in the same frequencies.
 *
 * Algorithm Used: **Character Frequency Count (Hashing)**
 * -------------------------------------------------------
 * - Instead of sorting (O(n log n)), we use **counting (O(n))** to track character occurrences.
 * - A **fixed-size array (`countOccurences[26]`)** is used as a simple hash table to store counts of letters.
 * - This solution is efficient and works only for **lowercase English letters (`a-z`)**.
 *
 * Data Structure Used: **Fixed-Size Integer Array (Acts as a Hash Table)**
 * ------------------------------------------------------------------------
 * - The array `countOccurences[26]` keeps track of character frequencies.
 * - `countOccurences[i]` corresponds to `i-th` letter in the alphabet (`0 = 'a', 25 = 'z'`).
 *
 * Steps:
 * ------
 * 1. **Check lengths:** If `s` and `t` are not of the same length, return `false` immediately.
 * 2. **Count character occurrences:** 
 *    - Iterate through `s` and increment the corresponding index in `countOccurences[]`.
 *    - Iterate through `t` and decrement the corresponding index.
 * 3. **Check for anagram condition:**
 *    - If all values in `countOccurences[]` are `0`, `s` and `t` are anagrams.
 *    - If any value is non-zero, return `false` (mismatch found).
 *
 * Time Complexity: **O(n)** (Single pass through `s` and `t`)
 * Space Complexity: **O(1)** (Fixed array of size 26)
 */

bool isAnagram(char* s, char* t) {
    
    int countOccurences[26]; // count letters of alphabet 

    if(strlen(s) != strlen(t)){
        return false;
    }

    for (char *ptr = s; *ptr != '\0'; ptr++) {

        countOccurences[*ptr - 'a']++;
    }

    for (char *ptr = t; *ptr != '\0'; ptr++) {

        countOccurences[*ptr - 'a']--;
    }

    for (int i = 0; i < 26; i++){
        if(countOccurences[i] != 0){
            return false;
        }
    }

    return true;
}


//C version supporting Unicode
//2ms
/**
 * Function: isAnagram
 * -------------------
 * This function checks whether two given strings are anagrams of each other.
 * An anagram is a word or phrase that contains the same characters with the same frequencies.
 * 
 * Algorithm Used: **Hash Table with Chaining**
 * -------------------------------------------------------
 * - Instead of sorting (`O(n log n)`), we use **hashing (`O(n)`)** to count character occurrences.
 * - A **hash table** (implemented with linked lists for collision handling) stores character frequencies.
 * - This implementation supports **Unicode characters (UTF-8, Extended ASCII)**.
 *
 * Data Structure: **Hash Table with Separate Chaining**
 * --------------------------------------------------------
 * - The hash table is implemented as an **array of linked lists (`HashNode* table[TABLE_SIZE]`)**.
 * - Each **character acts as a key**, and its **count** is stored as a value.
 * - A **hash function (`key % TABLE_SIZE`)** determines the index in the table.
 * - **Separate chaining (linked lists)** handles collisions.
 *
 * Steps:
 * ------
 * 1. **Check lengths:** If `s` and `t` are not of the same length, return `false` immediately.
 * 2. **Insert character occurrences into two hash tables:**
 *    - Iterate through `s` and insert each character into `hashTable1`, increasing its count.
 *    - Iterate through `t` and insert each character into `hashTable2`, increasing its count.
 * 3. **Compare both hash tables:** If they contain the same characters with the same counts, return `true`; otherwise, return `false`.
 * 4. **Free memory allocated for the hash tables.**
 *
 * Hashing Details:
 * ----------------
 * - The **hash function** (`key % TABLE_SIZE`) maps characters to table indices.
 * - Collisions are handled using **separate chaining (linked lists)**.
 * - Lookups and insertions in the hash table are **O(1) on average**.
 * - The overall complexity remains **O(n)**.
 *
 * Time Complexity: **O(n)** (Single pass through `s` and `t`, plus hash table operations)
 * Space Complexity: **O(n)** (Hash table stores at most `n` characters)
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// Hash table node
typedef struct HashNode {
    char key;
    int count;
    struct HashNode* next;
} HashNode;

#define TABLE_SIZE 128  // ASCII character range (or use 256 for extended ASCII)

// Hash function for characters
unsigned int hash(char key) {
    return (unsigned int)key % TABLE_SIZE;
}

// Insert or update character count in hash table
void insert(HashNode** table, char key, int increment) {
    unsigned int hashIndex = hash(key);
    HashNode* temp = table[hashIndex];

    // Search for the key
    while (temp) {
        if (temp->key == key) {
            temp->count += increment;
            return;
        }
        temp = temp->next;
    }

    // Not found, create a new node
    HashNode* newNode = (HashNode*)malloc(sizeof(HashNode));
    newNode->key = key;
    newNode->count = increment;
    newNode->next = table[hashIndex];
    table[hashIndex] = newNode;
}

// Search for a character count
int search(HashNode** table, char key) {
    unsigned int hashIndex = hash(key);
    HashNode* temp = table[hashIndex];

    while (temp) {
        if (temp->key == key)
            return temp->count;
        temp = temp->next;
    }
    return 0; // Default count if not found
}

// Compare two hash tables
bool compareHashTables(HashNode** table1, HashNode** table2) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        HashNode* node1 = table1[i];
        while (node1) {
            if (search(table2, node1->key) != node1->count) {
                return false;
            }
            node1 = node1->next;
        }
    }
    return true;
}

// Free memory allocated for hash table
void freeTable(HashNode** table) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        HashNode* temp = table[i];
        while (temp) {
            HashNode* next = temp->next;
            free(temp);
            temp = next;
        }
    }
}

// Function to check if two strings are anagrams
bool isAnagram(char* s, char* t) {
    if (strlen(s) != strlen(t)) {
        return false;
    }

    // Create two hash tables
    HashNode* hashTable1[TABLE_SIZE] = {NULL};
    HashNode* hashTable2[TABLE_SIZE] = {NULL};

    // Insert character frequencies into both hash tables
    for (int i = 0; s[i] != '\0'; i++) {
        insert(hashTable1, s[i], 1);
        insert(hashTable2, t[i], 1);
    }

    // Compare both hash tables
    bool result = compareHashTables(hashTable1, hashTable2);

    // Free allocated memory
    freeTable(hashTable1);
    freeTable(hashTable2);

    return result;
}

// Test cases
int main() {
    
    char s1[] = "你好世界"; // "Hello World" in Chinese
    char t1[] = "界好你世"; // Rearranged characters

    char s2[] = "résumé";
    char t2[] = "méusér";

    char s3[] = "Hello";
    char t3[] = "World";
    
    char s4[] = "aacc";
    char t4[] = "ccac";
    

    printf("Anagram Test 1: %s\n", isAnagram(s1, t1) ? "true" : "false"); // Expected: true
    printf("Anagram Test 2: %s\n", isAnagram(s2, t2) ? "true" : "false"); // Expected: true
    printf("Anagram Test 3: %s\n", isAnagram(s3, t3) ? "true" : "false"); // Expected: false
    printf("Anagram Test 4: %s\n", isAnagram(s4, t4) ? "true" : "false"); // Expected: false

    return 0;
}

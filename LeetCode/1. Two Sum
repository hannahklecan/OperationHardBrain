//Brute Force Approach:
//O(nÂ²)

class Solution {
    public int[] twoSum(int[] nums, int target) {

        int [] retVal = new int[2];
        
        for(int i = 0; i < nums.length; i++){

            for (int j= 0; j < nums.length; j++){
                
                if (i == j){
                    continue;
                }
                if (nums[i] + nums[j] == target){
                    retVal[0]= i;
                    retVal[1] = j;
                    return retVal;
                }
            }

        }
    
    return retVal;
    }
}

//Optimized Approach:
//O(n)
import java.util.HashMap;

class Solution {
    public int[] twoSum(int[] nums, int target) {

        HashMap <Integer, Integer> numsMap = new HashMap<>();

        for(int i=0; i <nums.length; i++){
            
            int compliment = target - nums[i];

            if (numsMap.containsKey(compliment)){

                return new int [] {numsMap.get(compliment), i};
            }

            numsMap.put(nums[i], i);
        }

    
    return new int []{};
    }
}


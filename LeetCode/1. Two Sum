/*
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

Constraints:
    2 <= nums.length <= 104
    -109 <= nums[i] <= 109
    -109 <= target <= 109
    Only one valid answer exists.

*/
//JAVA
//Brute Force Approach:
//O(n²)

class Solution {
    public int[] twoSum(int[] nums, int target) {

        int [] retVal = new int[2];
        
        for(int i = 0; i < nums.length; i++){

            for (int j= 0; j < nums.length; j++){
                
                if (i == j){
                    continue;
                }
                if (nums[i] + nums[j] == target){
                    retVal[0]= i;
                    retVal[1] = j;
                    return retVal;
                }
            }

        }
    
    return retVal;
    }
}

//Optimized Approach:
//O(n)
import java.util.HashMap;

class Solution {
    public int[] twoSum(int[] nums, int target) {

        HashMap <Integer, Integer> numsMap = new HashMap<>();

        for(int i=0; i <nums.length; i++){
            
            int compliment = target - nums[i];

            if (numsMap.containsKey(compliment)){

                return new int [] {numsMap.get(compliment), i};
            }

            numsMap.put(nums[i], i);
        }

    
    return new int []{};
    }
}

//C Implementation
//0ms
/**
 * Function: twoSum
 * -------------------
 * This function finds two indices in the given array `nums` such that the numbers at those indices add up to the `target`.
 * It returns an array containing these two indices.
 * 
 * Algorithm Used: **Hash Table with Separate Chaining**
 * -------------------------------------------------------
 * - Instead of using brute force (`O(n²)`), we use **hashing (`O(n)`)** to store and look up values efficiently.
 * - The **hash table** is implemented as an **array of linked lists (`HashNode* hashMap[TABLE_SIZE]`)** to handle collisions using **separate chaining**.
 * - This approach allows for **constant-time (O(1)) lookups and insertions on average**.
 *
 * Data Structure: **Hash Table with Chaining**
 * --------------------------------------------------------
 * - The hash table is implemented using an **array of linked lists**.
 * - Each **entry in the table corresponds to a linked list** (to handle hash collisions).
 * - The **hash function (`key % TABLE_SIZE`)** determines the index in the hash table.
 *
 * Steps:
 * ------
 * 1. **Create a hash table** (array of linked lists) to store values and their indices.
 * 2. **Iterate through the array:**
 *    - Calculate the **complement** of the current number (`target - nums[i]`).
 *    - **Check if the complement exists in the hash table**:
 *      - ✅ If found, return the indices `[previous_index, current_index]`.
 *      - ❌ If not found, store the current number in the hash table.
 * 3. **If no valid pair is found, return `NULL`.**
 *
 * Hashing Details:
 * ----------------
 * - The **hash function** (`abs(key) % numsSize`) maps numbers to table indices.
 * - Collisions are handled using **separate chaining (linked lists)**.
 * - Lookups and insertions in the hash table are **O(1) on average**.
 * - The overall complexity remains **O(n)**.
 *
 * Time Complexity: **O(n)** (Single pass through `nums` plus hash table operations)
 * Space Complexity: **O(n)** (Hash table stores at most `n` numbers)
 */

#include <stdlib.h>

typedef struct HashNode {

    int key;
    int value; 
    struct HashNode* next; 

}HashNode;

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    
    struct HashNode** hashMap = (struct HashNode**)calloc(numsSize, sizeof(HashNode*));

    int* retVal = (int*)malloc(2 * sizeof(int));

    for(int i = 0; i < numsSize; i++){

        int compliment = target - nums[i];
        int hashIndex = abs(compliment) % numsSize;
        struct HashNode* node = hashMap[hashIndex];

        while(node){

            if (node->key == compliment){

                retVal[0] = node->value;
                retVal[1] = i;
                *returnSize = 2;
                return retVal;
            }
            node = node -> next;
        }

        // Insert current number into hash table
        hashIndex = abs(nums[i]) % numsSize; 
        HashNode* newNode = (struct HashNode*)malloc(sizeof(struct HashNode));
        newNode->key = nums[i];
        newNode->value = i;
        newNode->next = hashMap[hashIndex];
        hashMap[hashIndex] = newNode;
    } 

    *returnSize = 0;
    return NULL;
}



/*
Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

Example 1:
Input: nums = [1,2,3,1], k = 3
Output: true

Example 2:
Input: nums = [1,0,1,1], k = 1
Output: true

Example 3:
Input: nums = [1,2,3,1,2,3], k = 2
Output: false

Constraints:
    1 <= nums.length <= 105
    -109 <= nums[i] <= 109
    0 <= k <= 105
*/

//JAVA
//Time complexity: O(N)

import java.util.HashMap;

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        
        HashMap <Integer, Integer> numsMap = new HashMap<>();
        
        for(int i=0; i <nums.length; i++){
            
            int compliment = nums[i];

            if (numsMap.containsKey(compliment) && (Math.abs((i - numsMap.get(compliment))) <= k)){

                return true; 
                
            }

            numsMap.put(nums[i], i);
        }
    
        return false;
    }
}

#PYTHON
from typing import List

class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        found = {} #dict
        for i, num in enumerate(nums):
            if num in found and i - found[num] <=k:
                return True
            found[num] = i
        return False
    
    n = [1,0,1,1]
    
solution = Solution()
nums = [1, 2, 3, 1]
k = 3
result = solution.containsNearbyDuplicate(nums, k)
print(result)  # Output: True


// C 
struct HashNode {
    int key;
    int value;
    struct HashNode* next;
};

bool containsNearbyDuplicate(int* nums, int numsSize, int k) {
    struct HashNode** hashMap = (struct HashNode**)calloc(numsSize, sizeof(struct HashNode*));

    for (int i = 0; i < numsSize; ++i) {
        int currentNum = nums[i];
        int hashIndex = abs(currentNum) % numsSize;

        struct HashNode* node = hashMap[hashIndex];
        while (node) {
            if (node->key == currentNum) {
                if (i - node->value <= k) {
                    free(hashMap);
                    return true;
                } else {
                    node->value = i;
                    break;
                }
            }
            node = node->next;
        }

        if (!node) {
            node = (struct HashNode*)malloc(sizeof(struct HashNode));
            node->key = currentNum;
            node->value = i;
            node->next = hashMap[hashIndex];
            hashMap[hashIndex] = node;
        }
    }

    free(hashMap);
    return false;
}
